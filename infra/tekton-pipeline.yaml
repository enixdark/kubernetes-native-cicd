---
apiVersion: v1
kind: Secret
metadata:
  name: harbor-credentials
  namespace: tekton-pipelines
  annotations:
    tekton.dev/docker-0: https://registry-harbor-core.harbor.svc.cluster.local/v2/
type: kubernetes.io/basic-auth
stringData:
  username: admin
  password: admin
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tekton-sa
  namespace: tekton-pipelines
secrets:
- name: harbor-credentials
- name: gh-credentials
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: tekton-sa
  namespace: tekton-pipelines
rules:
# Permissions for every EventListener deployment to function
- apiGroups: ["triggers.tekton.dev"]
  resources: ["eventlisteners", "triggerbindings", "triggertemplates"]
  verbs: ["get"]
- apiGroups: [""]
  # secrets are only needed for Github/Gitlab interceptors
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
# Permissions to create resources in associated TriggerTemplates
- apiGroups: ["tekton.dev"]
  resources: ["pipelineruns", "pipelineresources", "taskruns"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["impersonate"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tekton-sa
  namespace: tekton-pipelines
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-sa
subjects:
- kind: ServiceAccount
  name: tekton-sa
  namespace: tekton-pipelines
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kaniko-build-and-push
  namespace: tekton-pipelines
spec:
  params:
    - name: DOCKERFILE
      description: Path to the Dockerfile to build.
      default: ./Dockerfile
    - name: CONTEXT
      description: The build context used by Kaniko.
      default: ./
    - name: EXTRA_ARGS
      default: ""
    - name: BUILDER_IMAGE
      description: The image on which builds will run
      default: gcr.io/kaniko-project/executor:v0.13.0
  resources:
    inputs:
    - name: source-repo
      type: git
    outputs:
    - name: image-repo
      type: image
  steps:
  - name: build-and-push
    workingdir: /workspace/source-repo
    image: $(params.BUILDER_IMAGE)
    # specifying DOCKER_CONFIG is required to allow kaniko to detect docker credential
    # https://github.com/tektoncd/pipeline/pull/706
    env:
    - name: DOCKER_CONFIG
      value: /tekton/home/.docker
    command:
    - /kaniko/executor
    - $(params.EXTRA_ARGS)
    - --dockerfile=$(params.DOCKERFILE)
    - --context=/workspace/source-repo/$(params.CONTEXT)
    - --destination=$(outputs.resources.image-repo.url)
    - --cache=false
    - --insecure
    - --skip-tls-verify
    resources:
      limits:
        cpu: 1000m
        memory: "1Gi"
      requests:
        cpu: 100m
        memory: "128Mi"
    securityContext:
      runAsUser: 0
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ci-scripts
  namespace: tekton-pipelines
data:
  check_target_microservice.sh: |-
    #!/bin/bash
    git fetch --unshallow
    echo Changed file at commit ${COMMIT_HASH}
    git diff --name-only `git show ${COMMIT_HASH} --pretty="MERGE: %P"| grep -e "^MERGE: " | sed -e 's|^MERGE: ||'`

    IS_CHANGED=$(git diff --name-only `git show ${COMMIT_HASH} --pretty="MERGE: %P"| grep -e "^MERGE: " | sed -e 's|^MERGE: ||'` | grep -e "^microservices/${MICROSERVICE}/")
    if [ -z "${IS_CHANGED}" ]; then
      echo "commit ${COMMIT_HASH} is not for ${MICROSERVICE} microservices."
      exit 0;
    fi

  upload_manifests.sh: |-
    #!/bin/bash

    git checkout -b ${MICROSERVICE}-${COMMIT_HASH};
    git config --global user.email "${TB_GITHUB_USER}@example.com";
    git config --global user.name "${TB_GITHUB_USER}";
    git config --global credential.helper "store --file ~/.config/gh/git-cmd-credential"
    mkdir -p ~/.config/gh
    cat << _EOF_ > ~/.config/gh/git-cmd-credential
    https://${TB_GITHUB_USER}:${TB_GITHUB_TOKEN}@github.com
    _EOF_
    cat << _EOF_ > ~/.config/gh/hosts.yml
    github.com:
        user: ${TB_GITHUB_USER}
        oauth_token: ${TB_GITHUB_TOKEN}
    _EOF_
    sed -i -e "s|image: .*/${MICROSERVICE}:.*|image: ${REGISTRY_REPO}/${MICROSERVICE}:${COMMIT_HASH}|g" /workspace/source-repo/manifests/${MICROSERVICE}/app.yaml;
    git add --all;
    git commit -m "[Update manifest] ${MICROSERVICE} for new image tag ${COMMIT_HASH}";
    git push origin ${MICROSERVICE}-${COMMIT_HASH};
    cat << _EOF_ > ~/pr-body.txt
    RP is opened at $(date +%s)

    Changes:
    https://github.com/${TB_GITHUB_ORG_NAME}/kubernetes-native-cicd/commit/${COMMIT_HASH}

    Files:
    https://github.com/${TB_GITHUB_ORG_NAME}/kubernetes-native-cicd/tree/${COMMIT_HASH}/microservices/${MICROSERVICE}
    _EOF_

    gh pr create --repo ${TB_GITHUB_ORG_NAME}/kubernetes-native-cicd --base develop --title "[Update manifest] ${MICROSERVICE} for new image tag ${COMMIT_HASH}" --body "$(cat ~/pr-body.txt)";
---
apiVersion: tekton.dev/v1alpha1
kind: Condition
metadata:
  name: check-is-target-microservice
  namespace: tekton-pipelines
spec:
  params:
    - name: MICROSERVICE
    - name: COMMIT_HASH
  resources:
    - name: source-repo
      type: git
  check:
    workingdir: /workspace/source-repo
    image: k8stestbed/github-cli:v0.11.1
    env:
      - name: MICROSERVICE
        value: $(params.MICROSERVICE)
      - name: COMMIT_HASH
        value: $(params.COMMIT_HASH)
    script: git fetch --unshallow; IS_CHANGED=$(git diff --name-only `git show ${COMMIT_HASH} --pretty="%P" | head -n 1` | grep -e "^microservices/${MICROSERVICE}/"); if [ -z "${IS_CHANGED}" ]; then exit 1; fi
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pull-request-manifest
  namespace: tekton-pipelines
spec:
  params:
    - name: MICROSERVICE
      default: somemicroservice 
    - name: COMMIT_HASH
      default: xxxxxxxx
    - name: REGISTRY_REPO
      default: registry-harbor-core.harbor.svc.cluster.local/library
  resources:
    inputs:
    - name: source-repo
      type: git
  steps:
  - name: pull-request-manifest
    workingdir: /workspace/source-repo
    image: k8stestbed/github-cli:v0.11.1
    command:
    - sh
    - -c
    - /data/upload_manifests.sh
    env:
      - name: MICROSERVICE
        value: $(params.MICROSERVICE)
      - name: COMMIT_HASH
        value: $(params.COMMIT_HASH)
      - name: REGISTRY_REPO
        value: $(params.REGISTRY_REPO)
      - name: TB_GITHUB_USER
        valueFrom:
          secretKeyRef:
            name: github-credentials
            key: TB_GITHUB_USER
      - name: TB_GITHUB_TOKEN
        valueFrom:
          secretKeyRef:
            name: github-credentials
            key: TB_GITHUB_TOKEN
      - name: TB_GITHUB_ORG_NAME
        valueFrom:
          secretKeyRef:
            name: github-credentials
            key: TB_GITHUB_ORG_NAME
    resources:
      limits:
        cpu: 2
        memory: "2Gi"
      requests:
        cpu: 1
        memory: "1Gi"
    securityContext:
      runAsUser: 0
    volumeMounts:
      - name:  entrypoint-cm
        mountPath: /data
  volumes:
    - name: entrypoint-cm
      configMap:
        name: ci-scripts
        defaultMode: 493 # mode 755
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ci
  namespace: tekton-pipelines
spec:
  resources:
    - name: source-repo
      type: git
    - name: image-repo
      type: image
  params:
  - name: MICROSERVICE
  - name: COMMIT_HASH
  - name: REGISTRY_REPO
  tasks:
  - name: build-and-push
    taskRef:
      name: kaniko-build-and-push
    params:
    - name: DOCKERFILE
      value: ./microservices/$(params.MICROSERVICE)/Dockerfile
    - name: CONTEXT
      value: ./microservices/$(params.MICROSERVICE)
    resources:
      inputs:
      - name: source-repo
        resource: source-repo
      outputs:
      - name: image-repo
        resource: image-repo
    conditions:
      - conditionRef: check-is-target-microservice
        params:
          - name: MICROSERVICE
            value: $(params.MICROSERVICE)
          - name: COMMIT_HASH
            value: $(params.COMMIT_HASH)
        resources:
          - name: source-repo
            resource: source-repo
  - name: pull-request-manifest
    taskRef:
      name: pull-request-manifest
    runAfter:
    - build-and-push
    params:
    - name: MICROSERVICE
      value: $(params.MICROSERVICE)
    - name: COMMIT_HASH
      value: $(params.COMMIT_HASH)
    - name: REGISTRY_REPO
      value: $(params.REGISTRY_REPO)
    resources:
      inputs:
      - name: source-repo
        resource: source-repo
---
apiVersion: v1
kind: Secret
metadata:
  name: github-webhook-credentials
  namespace: tekton-pipelines
type: Opaque
stringData:
  github-webhook-secret: sample-github-webhook-secret
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: check-deprication-pluto
  namespace: tekton-pipelines
spec:
  params:
  - name: PIPELINERUN_NAME
  - name: TEKTON_URL
  resources:
    inputs:
    - name: source-repo
      type: git
    - name: pr
      type: pullRequest
    outputs:
    - name: pr
      type: pullRequest
  steps:
  - name: check-deprication
    workingdir: /workspace/source-repo
    image: renaultdigital/pluto:v3.4.1
    command:
    - sh
    - -c
    - |
      pluto detect-files -d /workspace/source-repo/manifests
      # TODO: auto detect kubernetes version
      # -v v1.16.13

      if [ $? -eq 0 ]; then
        STATUS=success
      else
        STATUS=failure
      fi

      cp -r /workspace/pr/* /workspace/output/pr/;
      cat << _EOF_ > /workspace/output/pr/status/check-deprication-pluto.json
      {
        "Label": "check-deprication-pluto",
        "State": "$STATUS",
        "Desc": "check deplicated manifests by pluto",
        "Target": "https://$(params.TEKTON_URL)/#/namespaces/tekton-pipelines/pipelineruns/$(params.PIPELINERUN_NAME)?pipelineTask=check-deprication-pluto&step=check-deprication"
      }
      _EOF_
      if [ "$STATUS" != "success" ]; then exit 1; fi
    resources:
      limits:
        cpu: 100m
        memory: "256Mi"
      requests:
        cpu: 50m
        memory: "128Mi"
    securityContext:
      runAsUser: 0
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: check-syntax-kubeval
  namespace: tekton-pipelines
spec:
  params:
  - name: PIPELINERUN_NAME
  - name: TEKTON_URL
  resources:
    inputs:
    - name: source-repo
      type: git
    - name: pr
      type: pullRequest
    outputs:
    - name: pr
      type: pullRequest
  steps:
  - name: check-syntax
    workingdir: /workspace/source-repo
    image: garethr/kubeval:0.15.0
    command:
    - sh
    - -c
    - |
      kubeval -d /workspace/source-repo/manifests
      # TODO: auto detect kubernetes version
      # -v v1.16.13

      if [ $? -eq 0 ]; then
        STATUS=success
      else
        STATUS=failure
      fi

      cp -r /workspace/pr/* /workspace/output/pr/;
      cat << _EOF_ > /workspace/output/pr/status/check-syntax-kubeval.json
      {
        "Label": "check-syntax-kubeval",
        "State": "$STATUS",
        "Desc": "check syntax manifests by kubeval",
        "Target": "https://$(params.TEKTON_URL)/#/namespaces/tekton-pipelines/pipelineruns/$(params.PIPELINERUN_NAME)?pipelineTask=check-syntax-kubeval&step=check-syntax"
      }
      _EOF_
      if [ "$STATUS" != "success" ]; then exit 1; fi
    resources:
      limits:
        cpu: 100m
        memory: "256Mi"
      requests:
        cpu: 50m
        memory: "128Mi"
    securityContext:
      runAsUser: 0
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: conftest-policy
  namespace: tekton-pipelines
data:
  main.rego: |-
    package main

    required_deployment_labels {
        input.metadata.labels["app.kubernetes.io/name"]
        input.metadata.labels["app.kubernetes.io/instance"]
        input.metadata.labels["app.kubernetes.io/component"]
        input.metadata.labels["app.kubernetes.io/part-of"]
    }

    workload_resources = [
      "Deployment",
      "DaemonSet",
      "StatefulSet",
    ]

    deny[msg] {
      input.kind == workload_resources[_]
      not required_deployment_labels
      msg = sprintf("Please use Recommended labels: [Kind=%s, Name=%s]", [input.kind, input.metadata.name])
    }

    deny[msg] {
      input.kind == workload_resources[_]
      container := input.spec.template.spec.containers[_]
      container.securityContext.privileged == true

      msg = sprintf("Do not use privileged containers: [Kind=%s, Name=%s, Container=%s]", [input.kind, input.metadata.name, container.name])
    }
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: check-policy-conftest
  namespace: tekton-pipelines
spec:
  params:
  - name: PIPELINERUN_NAME
  - name: TEKTON_URL
  resources:
    inputs:
    - name: source-repo
      type: git
    - name: pr
      type: pullRequest
    outputs:
    - name: pr
      type: pullRequest
  steps:
  - name: check-policy
    workingdir: /workspace/source-repo
    image: instrumenta/conftest:v0.20.0
    command:
    - sh
    - -c
    - |
      conftest test --policy /policy --input yaml --namespace main /workspace/source-repo/manifests

      if [ $? -eq 0 ]; then
        STATUS=success
      else
        STATUS=failure
      fi

      cp -r /workspace/pr/* /workspace/output/pr/;
      cat << _EOF_ > /workspace/output/pr/status/check-policy-conftest.json
      {
        "Label": "check-policy-conftest",
        "State": "$STATUS",
        "Desc": "check syntax manifests by kubeval",
        "Target": "https://$(params.TEKTON_URL)/#/namespaces/tekton-pipelines/pipelineruns/$(params.PIPELINERUN_NAME)?pipelineTask=check-policy-conftest&step=check-policy"
      }
      _EOF_
      if [ "$STATUS" != "success" ]; then exit 1; fi
    resources:
      limits:
        cpu: 100m
        memory: "256Mi"
      requests:
        cpu: 50m
        memory: "128Mi"
    securityContext:
      runAsUser: 0
    volumeMounts:
      - name:  policy-cm
        mountPath: /policy
  volumes:
    - name: policy-cm
      configMap:
        name: conftest-policy
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: check-manifests
  namespace: tekton-pipelines
spec:
  params:
    - name: COMMIT_HASH
    - name: PIPELINERUN_NAME
    - name: TEKTON_URL
  resources:
    - name: pr
      type: pullRequest
    - name: source-repo
      type: git
  tasks:
  - name: check-deprication-pluto
    taskRef:
      name: check-deprication-pluto
    params:
    - name: PIPELINERUN_NAME
      value: $(params.PIPELINERUN_NAME)
    - name: TEKTON_URL
      value: $(params.TEKTON_URL)
    resources:
      inputs:
      - name: source-repo
        resource: source-repo
      - name: pr
        resource: pr
      outputs:
      - name: pr
        resource: pr
  - name: check-syntax-kubeval
    taskRef:
      name: check-syntax-kubeval
    params:
    - name: PIPELINERUN_NAME
      value: $(params.PIPELINERUN_NAME)
    - name: TEKTON_URL
      value: $(params.TEKTON_URL)
    resources:
      inputs:
      - name: source-repo
        resource: source-repo
      - name: pr
        resource: pr
      outputs:
      - name: pr
        resource: pr
  - name: check-policy-conftest
    taskRef:
      name: check-policy-conftest
    params:
    - name: PIPELINERUN_NAME
      value: $(params.PIPELINERUN_NAME)
    - name: TEKTON_URL
      value: $(params.TEKTON_URL)
    resources:
      inputs:
      - name: source-repo
        resource: source-repo
      - name: pr
        resource: pr
      outputs:
      - name: pr
        resource: pr
